Welcome to the CMU-SV rails project for the Education group.

== System Modules
* {Peer Evaluation}[link:classes/PeerEvaluationReview.html]
* {People}[link:classes/Person.html]


== Conventions
Please use JQuery instead of Prototype. Whenever possible, AJAX should degrade
gracefully. Ie, there should be a way to do the same action without AJAX.

Whenever referencing an image use an <%= image_tag %> ie <%= image_tag("/images/student_male.jpg", :size => "50x50", :border=>"0", :alt=>"These fields can be edited by a student role") %>
On the production machine, images referenced with image_tag will be cached by apache for faster page renderings.
See http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html for more information.

When evaluating third party code, find ones that are well maintained. If you want to use a new Gem, check in with Todd first

Things to note...
* for a while the code separated a user into two tables, user and person. The original idea was that user would contain all the fields generated by restful-authentication and people would contain all the columns that were specific to this application. After some code was auto-generated, that idea was scrapped. All user data is in the user table. However, a few aspects of the system were never cleaned up. For example, effort_log has a column called "person_id" which uses the person controller but really ends up pointing to the user table.
* is_student and is_staff is mutually exclusive for the effort logging.
* On this project use JQuery instead of Prototype

== MfSE - Getting Started for Students
Students should
1. create a config/database.yml
1. copy config/morning_glory.mfse.yml to config/morning_glory.yml -- no need to configure
1. copy config/systems.default.yml to config/systems.yml -- no need to configure
1. create a config/amazon_s3.yml from (http://rails.sv.cmu.edu/pages/amazon_s3.yml)
1. create a config/google_apps.yml from (http://rails.sv.cmu.edu/pages/google_apps.yml)
1. Modify the db/seeds.rb and add yourself to it.
1. install postgres see http://rails.sv.cmu.edu/pages/postgres_rails
1. install a postgres database viewer (ie Navicat Lite http://www.navicat.com/en/download/download.html)
1. install imagemagick
   1. (Directions for a mac)
   1. install brew see http://mxcl.github.com/homebrew/  
   1. brew install imagemagick
1. bundle install
1. bundle exec rake db:schema:load
1. bundle exec rake db:setup (to load the seeds.rb data)
1. verify your configuration
   1. rails server thin      (Note: On 9/18/2011 WebBrick was not working with OmniAuth)
   1. bundle exec rake test  (Verify that all the tests pass)
   1. run the server in debug mode in an IDE.



==System configuration
Ruby 1.9.2-p180
see Gemfile for all other dependencies

== System Architecture

This application follows Ruby on Rails conventions whenever possible.
In particular, newer modules have "thick" models and "thin" controllers.

The code runs on a virtualized hosting provider specializing in Ruby on Rails
application deployment. The software currently runs in one mongrel instance
connected to a mysql database running on the same machine. Rails' asset host
feature is enabled which increases performance by having apache (not mongrel)
render most static files including images, css files, and javascript files.

There are a series of crontabs that execute daily or once a week. These call
various rake tasks which in turn call various controllers or models. Lengthy
crontab actions track progress through the activity, and are designed, if
executed again to only process the remaining data. ie weekly effort log
reminders. (Ironically, this feature has never been needed.)

=== Amazon S3
Newer parts of the system are beginning to use Amazon's S3 for file hosting.
This is done with the aid of the PaperClip (file attachment) and aws-s3 gem.

=== Google Apps Integration
* Mailing Lists - Until very recently, there was no way to know who was on which google mailing lists without asking IT to look it up. Now this application queries Google's provisitoning API to present to the user exactly who is on each mailing list.
* When a new user is created, their google account can be auto created at the same time.
* When people are added to a team, a mailing list for the team is created.

=== TWiki Integration
Some twiki information is better stored in a database. Also, we like to have
key information stored only in one place. For this reason we found a way to
do cross site scripting where information from one server is injected into
the webpage on a different server. For more details, read this blog: (INSERT HERE)

* User data shown on people's twiki pages comes from this application. On a user's twiki page (ie http://info.sv.cmu.edu/twiki/bin/view/Main/AndrewCarnegie)
a bit of AJAX loads a rails page.
* Team data shown on a coure's twiki page comes from this application.
* When a new user is created, their twiki account can be auto created at the
same time.

=== Curriculum Website Integration
* Comments post on the curriculum website are managed by the rails application.

=== Delayed Job
To run delayed jobs from a development environment, type "rake jobs:work"

==Additional References
To learn about unobtrusive javascript, check out:
   * http://www.simonecarletti.com/blog/2010/06/unobtrusive-javascript-in-rails-3/

 Working with jquery
   * See if you have the right element selected by adding a .css("border", "2px red solid")

To learn more about delayed job, check out:
   * http://devcenter.heroku.com/articles/delayed-job
   * http://blog.leetsoft.com/2008/2/17/delayed-job-dj

To learn about acts_as_versioned, check out:
   * http://duffsdevice.blogspot.com/2007/06/actsasversioned-simple-walkthrough.html
   * http://blog.cornetdesign.com/2009/05/acts_as_versioned-getting-started/
   * http://www.urbanhonking.com/ideasfordozens/archives/2006/02/learns_to_use_a_1.html

To learn about Google Apps and Provisioning, check out:
   * http://code.google.com/p/gdatav2rubyclientlib/

To learn about the table sorting, check out:
   * http://beckelman.net/post/2008/10/23/Client-Side-Table-Sorting-Paging-and-Filtering-with-jQuery-Demo.aspx
   * http://www.compulsivoco.com/2008/08/tablesorter-filter-results-based-on-search-string/

To learn about the date picker code, check out:
   * http://www.dynarch.com/projects/calendar/
   * Confirm with Todd if we are switching to jquery UI's date picker.

== Todos
Perhaps alter the course and course_numbers model. If so, update effort_logs_controller and look for foundations in recent_foundations_or_course





Run "rake doc:app" to generate API documentation for your models, controllers, helpers, and libraries.
